version: 2.1
parameters:
  prospect:
    type: string
    default: "thoughtworks"
  run_create_infra_base:
    type: boolean
    default: false
  run_create_infra_backstage:
    type: boolean
    default: false
  run_destroy_infra_backstage:
    type: boolean
    default: false

jobs:
  lint-tf:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: check terraform code
          command: |
            cd ./terraform/demo_terraform_aws_shared
            terraform init -input=false
            terraform validate
            cd ../demo_terraform_aws_lightsail
            terraform init -input=false
            ssh-keygen -t rsa -b 4096 -f "access-`terraform workspace show`" -P 'petname' -C "test@<< pipeline.parameters.prospect >>.com" -q -N ""
            terraform validate

  create-backend:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: create terraform backend infra
          command: |
            cd ./terraform/demo_terraform_aws_shared
            terraform init -input=false
            terraform plan -out tfapply-shared
            terraform apply tfapply-shared
            mv terraform.tf.example terraform.tf
            terraform init -input=false -migrate-state -force-copy
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd ./terraform/demo_terraform_aws_lightsail
            mv -v terraform.tf.example terraform.tf
            terraform init -input=false
            terraform workspace select << pipeline.parameters.prospect >> || terraform workspace new << pipeline.parameters.prospect >>
            ssh-keygen -t rsa -b 4096 -f "access-`terraform workspace show`" -P 'petname' -C "test@<< pipeline.parameters.prospect >>.com" -q -N ""
            terraform plan -out tfapply-lightsail -var domain_name="`terraform workspace show`.demodx.gama.technology"
      - persist_to_workspace:
          root: .
          paths:
            - .
  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply
          command: |
            cd ./terraform/demo_terraform_aws_lightsail
            terraform workspace select << pipeline.parameters.prospect >>
            terraform apply tfapply-lightsail
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-destroy:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform destroy plan
          command: |
            cd ./terraform/demo_terraform_aws_lightsail
            mv -v terraform.tf.example terraform.tf
            terraform init -input=false
            terraform workspace select << pipeline.parameters.prospect >> || terraform workspace new << pipeline.parameters.prospect >>
            ssh-keygen -t rsa -b 4096 -f "access-`terraform workspace show`" -P 'petname' -C "test@<< pipeline.parameters.prospect >>.com" -q -N ""
            terraform plan -destroy -out tfdestroy-lightsail
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd ./terraform/demo_terraform_aws_lightsail
            terraform workspace select << pipeline.parameters.prospect >>
            terraform apply tfdestroy-lightsail
  
workflows:
  version: 2
  lint:
    jobs:
      - lint-tf
  create-infra-base:
    when: << pipeline.parameters.run_create_infra_base >>
    jobs:
      - create-backend
  create-infra-backstage:
    when: << pipeline.parameters.run_create_infra_backstage >>
    jobs:
      - plan-apply
      - apply:
          requires:
            - plan-apply
  destroy-infra-backstage:
    when: << pipeline.parameters.run_destroy_infra_backstage >>
    jobs:
      - hold-destroy:
          type: approval
      - plan-destroy:
          requires:
            - hold-destroy
      - destroy:
          requires:
            - plan-destroy
